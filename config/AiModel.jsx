// const {
//   GoogleGenerativeAI,
//   HarmCategory,
//   HarmBlockThreshold,
// } = require("@google/generative-ai");

// const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
// const genAI = new GoogleGenerativeAI(apiKey);

// const model = genAI.getGenerativeModel({
//   model: "gemini-2.0-pro-exp-02-05",
// });

// const generationConfig = {
//   temperature: 1,
//   topP: 0.95,
//   topK: 64,
//   maxOutputTokens: 8192,
//   responseMimeType: "text/plain",
// };

// const CodegenerationConfig = {
//   temperature: 1,
//   topP: 0.95,
//   topK: 64,
//   maxOutputTokens: 8192,
//   responseMimeType: "application/json",
// };

// export const chatSession = model.startChat({
//   generationConfig,
//   history: [
//   ],
// });

// export const GenAiCode = model.startChat({
//   generationConfig: CodegenerationConfig,
//   history: [
//     {
//       role: "user",
//       parts: [
//         { text: "Generate to do app :\nGenerate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere’s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   `,\n\n\n" },
//       ],
//     },
//     {
//       role: "model",
//       parts: [
//         { text: "```json\n{\n  \"projectTitle\": \"ToDo App\",\n  \"explanation\": \"This project is a simple to-do application built with React and Tailwind CSS. It allows users to add, edit, mark as complete, and delete tasks. The application is structured into components for the main app, task list, task item, and add task form.  Lucide React icons are used for visual cues. The app maintains a list of tasks in its state and provides basic CRUD operations for task management. The UI is designed to be clean, intuitive, and responsive. We also included a section for statistics.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TaskList from './components/TaskList';\\nimport AddTaskForm from './components/AddTaskForm';\\nimport { Calendar, Check, Plus, Trash, Edit } from 'lucide-react';\\nimport { format } from 'date-fns';\\nimport { Bar } from 'react-chartjs-2';\\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\\n\\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\\n\\nexport default function App() {\\n  const [tasks, setTasks] = useState([]);\\n\\n  useEffect(() => {\\n    const savedTasks = JSON.parse(localStorage.getItem('tasks')) || [];\\n    setTasks(savedTasks);\\n  }, []);\\n\\n  useEffect(() => {\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (newTask) => {\\n    setTasks([...tasks, { ...newTask, id: Date.now() }]);\\n  };\\n\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter((task) => task.id !== id));\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTasks(\\n      tasks.map((task) =>\\n        task.id === id ? { ...task, completed: !task.completed } : task\\n      )\\n    );\\n  };\\n\\n  const editTask = (id, newText) => {\\n      setTasks(tasks.map(task => task.id === id ? { ...task, text: newText } : task));\\n  }\\n\\n    const completedTasks = tasks.filter(task => task.completed).length;\\n    const pendingTasks = tasks.length - completedTasks;\\n\\n\\n const chartData = {\\n        labels: ['Completed', 'Pending'],\\n        datasets: [\\n          {\\n            label: 'Tasks Status',\\n            data: [completedTasks, pendingTasks],\\n             backgroundColor: [\\n              'rgba(75, 192, 192, 0.6)', // Completed - Teal color\\n              'rgba(255, 99, 132, 0.6)', // Pending - Red color\\n            ],\\n            borderColor: [\\n              'rgba(75, 192, 192, 1)',\\n              'rgba(255, 99, 132, 1)',\\n            ],\\n            borderWidth: 1,\\n          },\\n        ],\\n      };\\n\\n   const chartOptions = {\\n     responsive: true,\\n    plugins: {\\n          legend: {\\n            position: 'top',\\n      },\\n    title: {\\n display: true,\\n    text: 'Tasks Overview 📊',\\n        },\\n  },\\n};\\n\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100\\\">\\n      <header className=\\\"bg-blue-600 p-4\\\">\\n        <h1 className=\\\"text-white text-2xl font-bold text-center flex items-center justify-center\\\">\\n          <Calendar className=\\\"mr-2\\\" /> ToDo App\\n        </h1>\\n      </header>\\n      <div className=\\\"container mx-auto p-4\\\">\\n        <AddTaskForm onAddTask={addTask} />\\n         <div className='mt-8'>\\n          <Bar data={chartData} options={chartOptions}  />\\n        </div>\\n        <TaskList\\n          tasks={tasks}\\n          onDeleteTask={deleteTask}\\n          onToggleComplete={toggleComplete}\\n           onEditTask={editTask}\\n        />\\n      </div>\\n      <footer className=\\\"bg-gray-200 p-4 mt-8 text-center\\\">\\n        <p className=\\\"text-gray-700\\\">© {format(new Date(), 'yyyy')} ToDo App. All rights reserved.</p>\\n      </footer>\\n    </div>\\n  );\\n}\\n\"\n    },\n    \"/components/TaskList.js\": {\n      \"code\": \"import React, {useState} from 'react';\\nimport { Trash, Check, Edit, X } from 'lucide-react';\\n\\nconst TaskList = ({ tasks, onDeleteTask, onToggleComplete, onEditTask }) => {\\n  const [editId, setEditId] = useState(null);\\n    const [editText, setEditText] = useState('');\\n\\n const handleEditClick = (task) => {\\n        setEditId(task.id);\\n        setEditText(task.text);\\n    }\\n\\n    const handleSave = (id) => {\\n        onEditTask(id, editText);\\n        setEditId(null);\\n        setEditText('');\\n    }\\n  return (\\n    <ul className=\\\"mt-4\\\">\\n      {tasks.map((task) => (\\n        <li\\n          key={task.id}\\n          className={`flex items-center justify-between p-3 rounded-lg my-2 ${task.completed ? 'bg-green-200' : 'bg-white'}`}\\n          >\\n          <div className=\\\"flex items-center\\\">\\n             <button\\n              onClick={() => onToggleComplete(task.id)}\\n              className={`mr-2 ${task.completed? 'bg-green-500 text-white' : 'border border-gray-300'}  p-1 rounded-full hover:bg-green-300 transition duration-300`}\\n            >\\n              <Check className=\\\"h-4 w-4\\\" />\\n            </button>\\n            {editId === task.id ? (\\n              <>\\n                <input\\n                  type=\\\"text\\\"\\n                  value={editText}\\n                  onChange={(e) => setEditText(e.target.value)}\\n                    className='border p-1 rounded mr-2'\\n                />\\n\\n                 <button\\n                  onClick={() => handleSave(task.id)}\\n                  className='bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded mr-2'\\n                >\\n                  Save\\n                </button>\\n                <button\\n                 onClick={() => {setEditId(null); setEditText('')}}\\n                   className='bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-2 rounded'\\n                >\\n                 <X/>                 \\n               </button>\\n               </>\\n             ) : (\\n                <span className={task.completed ? 'line-through text-gray-500' : ''}>\\n                 {task.text}\\n                </span>\\n           )}\\n          </div>\\n          \\n         {editId !== task.id && (\\n           <div>\\n             <button\\n               onClick={() => handleEditClick(task)}\\n               className='text-blue-500 hover:text-blue-700 mr-2'\\n             >\\n              <Edit className='h-4 w-4'/>\\n            </button>\\n            <button\\n              onClick={() => onDeleteTask(task.id)}\\n             className='text-red-500 hover:text-red-700'\\n            >\\n              <Trash className=\\\"h-4 w-4\\\" />\\n           </button>\\n         </div>\\n        )}\\n        </li>\\n     ))}\\n    </ul>\\n  );\\n};\\n\\nexport default TaskList;\"\n    },\n    \"/components/AddTaskForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nconst AddTaskForm = ({ onAddTask }) => {\\n  const [taskText, setTaskText] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (taskText.trim()) {\\n      onAddTask({ text: taskText, completed: false });\\n      setTaskText('');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"mt-4 flex items-center\\\">\\n      <input\\n        type=\\\"text\\\"\\n        value={taskText}\\n        onChange={(e) => setTaskText(e.target.value)}\\n        placeholder=\\\"Add a new task...\\\"\\n        className=\\\"flex-grow p-2 border rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n      />\\n      <button\\n        type=\\\"submit\\\"\\n        className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold p-2 rounded-r-md\\\">\\n          <Plus/>\\n      </button>\\n    </form>\\n  );\\n};\\n\\nexport default AddTaskForm;\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TaskList.js\",\n    \"/components/AddTaskForm.js\"\n  ]\n}\n```\n" },
//       ],
//     },
//   ],
// })

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// //console.log(result.response.text());

const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const CodeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};


  export const chatSession = model.startChat({
    generationConfig,
    history: [
    ],
  });

  export const GenAiCode=model.startChat({
    generationConfig:CodeGenerationConfig,
    history:  [
      {
        role: "user",
        parts: [
          {text: "create a to do list in react app\n    You are an AI assistant on AIForge you are an exceptional senior software developer with vast knowledge across multiple programming languages, frameworks, and best practices.\n All the code that you generate would be passed to code sandbox api ,so the code generated should be structured in a way such that it defaults with codesandbox structure and  it can be run in the code sandbox api.\n for example in react the default directory in code sandbox have app.js index.js styles.css and public folder with index.html file in it.so you need to keep this default structure in mind while generating the code.\n    You need to generate a Project in a framework you see fit for the project you are asked to build.To decide the framework of choice \n I am providing you with the key value pair array which would have the key as the tech stack we can \nuse in this project you can only use the stacks i have provided you in the array you cannot use anyother stack , you would also need to return the value for the corresponding key you chose \nin the response you generate .\nYou must return the tech stack key's value in your final JSON under \"techStack\" using this exact array:\n techstack array =[\n  { tech: \"HTML/CSS/JS\", value: \"static\" },\n  { tech: \"Angular\", value: \"angular\" },\n  { tech: \"React\", value: \"react\" },\n  { tech: \"React + TypeScript\", value: \"react-ts\" },\n  { tech: \"SolidJS\", value: \"solid\" },\n  { tech: \"Svelte\", value: \"svelte\" },\n  { tech: \"Vue\", value: \"vue\" },\n  { tech: \"Vue + TypeScript\", value: \"vue-ts\" },\n  { tech: \"Node.js\", value: \"node\" },\n  { tech: \"Next.js\", value: \"nextjs\" },\n  { tech: \"Vite\", value: \"vite\" },\n  { tech: \"Vite + React\", value: \"vite-react\" },\n  { tech: \"Vite + React + TypeScript\", value: \"vite-react-ts\" },\n  { tech: \"Vite + Preact\", value: \"vite-preact\" },\n  { tech: \"Vite + Preact + TypeScript\", value: \"vite-preact-ts\" },\n  { tech: \"Vite + Vue\", value: \"vite-vue\" },\n  { tech: \"Vite + Vue + TypeScript\", value: \"vite-vue-ts\" },\n  { tech: \"Vite + Svelte\", value: \"vite-svelte\" },\n  { tech: \"Vite + Svelte + TypeScript\", value: \"vite-svelte-ts\" },\n  { tech: \"Astro\", value: \"astro\" },\n]\nFor Example if React is what you want to use in the given project then you should return react only in the response you generate. \n\n-You must only choose a stack from this list. If the project request clearly aligns with one of the stacks (e.g., mentions Vue, or a need for lightweight, static site), then choose accordingly.\nIf no specific preference is mentioned, default to: React (frontend), Node (backend), Next.js (fullstack).\nIn the project you need to Create multiple components, organizing them in separate folders with filenames using the .js extension if javascript exptension is used in the stack of choice else ts for typescript, if needed. The output should use Tailwind CSS for styling always, \nyou can use any third-party dependencies or libraries in the project with only condition being to add the used dependancy in the dependencies by you , you need to generate all the dependancies required for the project for\n example if date-fns, google generativ ai , firebase , tailwind css ,chart js ,lucide react ,react router dom are to be used in a react project then the generated dependanices should look like this {\"postcss\": \"^8\",\n\"tailwindcss\": \"^3.4.1\",\nautoprefixer: \"^10.0.0\",\n\"uuid4\": \"^2.0.3\",\n\"tailwind-merge\": \"^2.4.0\",\n\"tailwindcss-animate\": \"^1.0.7\",\n\"lucide-react\": \"^0.469.0\",\n\"react-router-dom\": \"^7.1.1\",\n\"firebase\": \"^11.1.0\",\n\"@google/generative-ai\": \"^0.21.0\",\n\"date-fns\": \"^4.1.0\",\n\"react-chartjs-2\": \"^5.3.0\",\n\"chart.js\": \"^4.4.7\",}\n-you should not generate the main app file for example the app.js , app.css and index.html in react and app.svelte in svelte in the src folder you need to generate them in the root directory \n-You also need to generate a Readme file of the project in the files component this readme can include the how to start the project ,project sohrt description , more resources , file structure of the program\n-you would also need to generate config files of tailwind  so for example if in a react project you intialise tailwindCSS you need \nto have files like postcss.config.js and and tailwind.config.js so you would need to generate those files as welll and if in anyother stack you can generate \nthe corresponding config files for tailwind.\n-You need to generate all the config files needed for the particular tech stack as well \n-also remember there is no terminal so the dependencies you define cannot be installed so if particular dependency added post install generated any files you would need to generate that files aswell. \n-It is mandatory for you to generate the value from the tech stack array for techstack we need to build this app and you need to return it in the below schema as a value of techstack\n-Do not create the main\nReturn the response in JSON format with the following schema:\n{\n\"projectTitle\": \"\",\n\"explanation\": \"\",\n\"techStack\": \"\",\n\"files\": {\n\"/App.js\": {\n\"code\": \"\"\n},\n\"/Readme.md\":{\n\"code\":\"\"\n}\n...\n},\n\"dependancies\":{\n\"tailwindcss\": \"^3.4.1\",\n...\n}\n\"generatedFiles\": []\n}\n\nAdditionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n\n\nFor placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n-Add Emoji icons whenever needed to give good user experinence\n\nall designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\nBy default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\nUse icons from lucide for logos.\n\nUse stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags. \n "},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"projectTitle\": \"React To-Do List App\",\n  \"explanation\": \"This project is a simple yet functional To-Do List application built with React and styled with Tailwind CSS. Users can add tasks to the list, mark them as completed, and remove them. The application utilizes React's component-based architecture and hooks to manage the state and behavior of the to-do list. The visual styling is achieved through Tailwind CSS, providing a responsive and modern user interface. All the components are well structured and are placed in components directory\",\n  \"techStack\": \"react\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport TodoList from './components/TodoList/TodoList';\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"bg-gray-100 min-h-screen py-10\\\">\\n      <div className=\\\"container mx-auto p-4\\\">\\n        <h1 className=\\\"text-3xl font-bold text-center mb-8\\\">📝 My To-Do List</h1>\\n        <TodoList />\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\"\n    },\n    \"/components/TodoList/TodoList.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport TodoItem from '../TodoItem/TodoItem';\\nimport { v4 as uuidv4 } from 'uuid';\\n\\nfunction TodoList() {\\n  const [todos, setTodos] = useState([]);\\n  const [newTodo, setNewTodo] = useState('');\\n\\n  const handleInputChange = (e) => {\\n    setNewTodo(e.target.value);\\n  };\\n\\n  const addTodo = () => {\\n    if (newTodo.trim() !== '') {\\n      setTodos([...todos, { id: uuidv4(), text: newTodo, completed: false }]);\\n      setNewTodo('');\\n    }\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTodos(todos.map(todo => todo.id === id ? { ...todo, completed: !todo.completed } : todo));\\n  };\\n\\n  const deleteTodo = (id) => {\\n    setTodos(todos.filter(todo => todo.id !== id));\\n  };\\n\\n  return (\\n    <div className=\\\"bg-white shadow-md rounded-lg p-4\\\">\\n      <div className=\\\"flex mb-4\\\">\\n        <input\\n          type=\\\"text\\\"\\n          className=\\\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n          placeholder=\\\"Add New To-Do\\\" value={newTodo} onChange={handleInputChange}\\n        />\\n        <button className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\\\"\\n        onClick={addTodo}>Add</button>\\n      </div>\\n      <ul>\\n        {todos.map(todo => (\\n          <TodoItem\\n            key={todo.id}\\n            todo={todo}\\n            toggleComplete={toggleComplete}\\n            deleteTodo={deleteTodo}\\n          />\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n}\\n\\nexport default TodoList;\"\n    },\n    \"/components/TodoItem/TodoItem.js\": {\n      \"code\": \"import React from 'react';\\nimport { CheckCircle, X } from 'lucide-react';\\n\\nfunction TodoItem({ todo, toggleComplete, deleteTodo }) {\\n  return (\\n    <li className=\\\"flex items-center justify-between py-2 border-b border-gray-200\\\">\\n      <div className=\\\"flex items-center\\\">\\n        <button onClick={() => toggleComplete(todo.id)} className=\\\"mr-2 focus:outline-none\\\">\\n          {todo.completed ? (\\n            <CheckCircle className=\\\"h-5 w-5 text-green-500\\\" />\\n          ) : (\\n            <div className=\\\"h-5 w-5 rounded-full border-2 border-gray-400\\\"></div>\\n          )}\\n        </button>\\n        <span className={`text-gray-700 ${todo.completed ? 'line-through text-gray-500' : ''}`}>{todo.text}</span>\\n      </div>\\n      <button onClick={() => deleteTodo(todo.id)} className=\\\"focus:outline-none\\\">\\n        <X className=\\\"h-5 w-5 text-red-500 hover:text-red-700\\\"/>\\n      </button>\\n    </li>\\n  );\\n}\\n\\nexport default TodoItem;\"\n    },\n    \"/index.js\": {\n      \"code\": \"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport './index.css';\\nimport App from './App';\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\"\n    },\n    \"/index.css\": {\n      \"code\": \"@tailwind base;\\n@tailwind components;\\n@tailwind utilities;\"\n    },\n    \"/tailwind.config.js\": {\n      \"code\": \"/** @type {import('tailwindcss').Config} */\\nmodule.exports = {\\n  content: [\\\"./src/**/*.{html,js}\\\",\\n  './components/**/*.{js,ts,jsx,tsx,mdx}',\\n  './app/**/*.{js,ts,jsx,tsx,mdx}',],\\n  theme: {\\n    extend: {},\\n  },\\n  plugins: [],\\n}\"\n    },\n     \"/postcss.config.js\": {\n      \"code\": \"module.exports = {\\n  plugins: {\\n    tailwindcss: {},\\n    autoprefixer: {},\\n  },\\n}\"\n    },\n    \"/Readme.md\": {\n      \"code\": \"# React To-Do List App 🚀\\n\\n## Description\\n\\nThis is a simple and intuitive To-Do List application built with React and styled with Tailwind CSS. It allows users to manage their tasks efficiently by adding new tasks, marking them as completed, and deleting them when they are no longer needed.\\n\\n## Features\\n\\n-   **Add Tasks:** Easily add new tasks to your to-do list.\\n-   **Mark as Complete:** Toggle tasks as completed to keep track of your progress.\\n-   **Delete Tasks:** Remove tasks that are no longer relevant.\\n-   **Clean UI:** A simple and clean user interface powered by Tailwind CSS.\\n\\n## File Structure\\n\\n```\\n├── public/\\n│   └── index.html\\n├── src/\\n│   ├── components/\\n│   │   ├── TodoItem/\\n│   │   │   └── TodoItem.js        # Individual to-do item component\\n│   │   ├── TodoList/\\n│   │   │   └── TodoList.js        # The list of to-do items\\n│   ├── App.js                   # Main application component\\n│   ├── index.js                 # Entry point of the React application\\n│   └── index.css                # Global styles, including Tailwind directives\\n├── tailwind.config.js        # Tailwind CSS configuration file\\n├── postcss.config.js         # PostCSS configuration file\\n└── package.json               # Project dependencies and scripts\\n```\\n\\n## How to Run\\n\\n1.  Clone the repository to your local machine.\\n2.  Navigate to the project directory.\\n3.  Install the dependencies using `npm install` or `yarn install`.\\n4.  Start the development server with `npm start` or `yarn start`.\\n5.  Open your browser and go to `http://localhost:3000` (or the port specified in your terminal).\\n\\n## Dependencies\\n\\n-   React\\n-   Tailwind CSS\\n-   lucide-react\\n-   uuid\\n\\n## More Resources\\n\\n-   [React Documentation](https://reactjs.org/docs/getting-started.html)\\n-   [Tailwind CSS Documentation](https://tailwindcss.com/docs/)\\n-   [Lucide React](https://lucide.dev/)\\n\"\n    }\n  },\n  \"dependancies\": {\n    \"tailwindcss\": \"^3.4.1\",\n    \"postcss\": \"^8\",\n    \"autoprefixer\": \"^10.0.0\",\n    \"lucide-react\": \"^0.469.0\",\n    \"uuid\": \"^9.0.1\"\n  },\n  \"generatedFiles\": [\n    \"tailwind.config.js\",\n    \"postcss.config.js\"\n  ]\n}\n```"},
        ],
      },
    ],
  })
