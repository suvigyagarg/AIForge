const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-pro-exp-02-05",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 64,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const CodegenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 64,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const chatSession = model.startChat({
  generationConfig,
  history: [
  ],
});

export const GenAiCode = model.startChat({
  generationConfig: CodegenerationConfig,
  history: [
    {
      role: "user",
      parts: [
        { text: "Generate to do app :\nGenerate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHereâ€™s the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   `,\n\n\n" },
      ],
    },
    {
      role: "model",
      parts: [
        { text: "```json\n{\n  \"projectTitle\": \"ToDo App\",\n  \"explanation\": \"This project is a simple to-do application built with React and Tailwind CSS. It allows users to add, edit, mark as complete, and delete tasks. The application is structured into components for the main app, task list, task item, and add task form.  Lucide React icons are used for visual cues. The app maintains a list of tasks in its state and provides basic CRUD operations for task management. The UI is designed to be clean, intuitive, and responsive. We also included a section for statistics.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TaskList from './components/TaskList';\\nimport AddTaskForm from './components/AddTaskForm';\\nimport { Calendar, Check, Plus, Trash, Edit } from 'lucide-react';\\nimport { format } from 'date-fns';\\nimport { Bar } from 'react-chartjs-2';\\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\\n\\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\\n\\nexport default function App() {\\n  const [tasks, setTasks] = useState([]);\\n\\n  useEffect(() => {\\n    const savedTasks = JSON.parse(localStorage.getItem('tasks')) || [];\\n    setTasks(savedTasks);\\n  }, []);\\n\\n  useEffect(() => {\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (newTask) => {\\n    setTasks([...tasks, { ...newTask, id: Date.now() }]);\\n  };\\n\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter((task) => task.id !== id));\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTasks(\\n      tasks.map((task) =>\\n        task.id === id ? { ...task, completed: !task.completed } : task\\n      )\\n    );\\n  };\\n\\n  const editTask = (id, newText) => {\\n      setTasks(tasks.map(task => task.id === id ? { ...task, text: newText } : task));\\n  }\\n\\n    const completedTasks = tasks.filter(task => task.completed).length;\\n    const pendingTasks = tasks.length - completedTasks;\\n\\n\\n const chartData = {\\n        labels: ['Completed', 'Pending'],\\n        datasets: [\\n          {\\n            label: 'Tasks Status',\\n            data: [completedTasks, pendingTasks],\\n             backgroundColor: [\\n              'rgba(75, 192, 192, 0.6)', // Completed - Teal color\\n              'rgba(255, 99, 132, 0.6)', // Pending - Red color\\n            ],\\n            borderColor: [\\n              'rgba(75, 192, 192, 1)',\\n              'rgba(255, 99, 132, 1)',\\n            ],\\n            borderWidth: 1,\\n          },\\n        ],\\n      };\\n\\n   const chartOptions = {\\n     responsive: true,\\n    plugins: {\\n          legend: {\\n            position: 'top',\\n      },\\n    title: {\\n display: true,\\n    text: 'Tasks Overview ðŸ“Š',\\n        },\\n  },\\n};\\n\\n\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100\\\">\\n      <header className=\\\"bg-blue-600 p-4\\\">\\n        <h1 className=\\\"text-white text-2xl font-bold text-center flex items-center justify-center\\\">\\n          <Calendar className=\\\"mr-2\\\" /> ToDo App\\n        </h1>\\n      </header>\\n      <div className=\\\"container mx-auto p-4\\\">\\n        <AddTaskForm onAddTask={addTask} />\\n         <div className='mt-8'>\\n          <Bar data={chartData} options={chartOptions}  />\\n        </div>\\n        <TaskList\\n          tasks={tasks}\\n          onDeleteTask={deleteTask}\\n          onToggleComplete={toggleComplete}\\n           onEditTask={editTask}\\n        />\\n      </div>\\n      <footer className=\\\"bg-gray-200 p-4 mt-8 text-center\\\">\\n        <p className=\\\"text-gray-700\\\">Â© {format(new Date(), 'yyyy')} ToDo App. All rights reserved.</p>\\n      </footer>\\n    </div>\\n  );\\n}\\n\"\n    },\n    \"/components/TaskList.js\": {\n      \"code\": \"import React, {useState} from 'react';\\nimport { Trash, Check, Edit, X } from 'lucide-react';\\n\\nconst TaskList = ({ tasks, onDeleteTask, onToggleComplete, onEditTask }) => {\\n  const [editId, setEditId] = useState(null);\\n    const [editText, setEditText] = useState('');\\n\\n const handleEditClick = (task) => {\\n        setEditId(task.id);\\n        setEditText(task.text);\\n    }\\n\\n    const handleSave = (id) => {\\n        onEditTask(id, editText);\\n        setEditId(null);\\n        setEditText('');\\n    }\\n  return (\\n    <ul className=\\\"mt-4\\\">\\n      {tasks.map((task) => (\\n        <li\\n          key={task.id}\\n          className={`flex items-center justify-between p-3 rounded-lg my-2 ${task.completed ? 'bg-green-200' : 'bg-white'}`}\\n          >\\n          <div className=\\\"flex items-center\\\">\\n             <button\\n              onClick={() => onToggleComplete(task.id)}\\n              className={`mr-2 ${task.completed? 'bg-green-500 text-white' : 'border border-gray-300'}  p-1 rounded-full hover:bg-green-300 transition duration-300`}\\n            >\\n              <Check className=\\\"h-4 w-4\\\" />\\n            </button>\\n            {editId === task.id ? (\\n              <>\\n                <input\\n                  type=\\\"text\\\"\\n                  value={editText}\\n                  onChange={(e) => setEditText(e.target.value)}\\n                    className='border p-1 rounded mr-2'\\n                />\\n\\n                 <button\\n                  onClick={() => handleSave(task.id)}\\n                  className='bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded mr-2'\\n                >\\n                  Save\\n                </button>\\n                <button\\n                 onClick={() => {setEditId(null); setEditText('')}}\\n                   className='bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-2 rounded'\\n                >\\n                 <X/>                 \\n               </button>\\n               </>\\n             ) : (\\n                <span className={task.completed ? 'line-through text-gray-500' : ''}>\\n                 {task.text}\\n                </span>\\n           )}\\n          </div>\\n          \\n         {editId !== task.id && (\\n           <div>\\n             <button\\n               onClick={() => handleEditClick(task)}\\n               className='text-blue-500 hover:text-blue-700 mr-2'\\n             >\\n              <Edit className='h-4 w-4'/>\\n            </button>\\n            <button\\n              onClick={() => onDeleteTask(task.id)}\\n             className='text-red-500 hover:text-red-700'\\n            >\\n              <Trash className=\\\"h-4 w-4\\\" />\\n           </button>\\n         </div>\\n        )}\\n        </li>\\n     ))}\\n    </ul>\\n  );\\n};\\n\\nexport default TaskList;\"\n    },\n    \"/components/AddTaskForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nconst AddTaskForm = ({ onAddTask }) => {\\n  const [taskText, setTaskText] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (taskText.trim()) {\\n      onAddTask({ text: taskText, completed: false });\\n      setTaskText('');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"mt-4 flex items-center\\\">\\n      <input\\n        type=\\\"text\\\"\\n        value={taskText}\\n        onChange={(e) => setTaskText(e.target.value)}\\n        placeholder=\\\"Add a new task...\\\"\\n        className=\\\"flex-grow p-2 border rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500\\\"\\n      />\\n      <button\\n        type=\\\"submit\\\"\\n        className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold p-2 rounded-r-md\\\">\\n          <Plus/>\\n      </button>\\n    </form>\\n  );\\n};\\n\\nexport default AddTaskForm;\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TaskList.js\",\n    \"/components/AddTaskForm.js\"\n  ]\n}\n```\n" },
      ],
    },
  ],
})

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());

